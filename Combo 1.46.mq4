/*
   Generated by EX4-TO-MQ4 decompiler V4.0.224.1 []
   Website: http://purebeam.biz
   E-mail : purebeam@gmail.com
*/
#property copyright ""
#property link      ""

#import "Kernel32.dll"
   void GetSystemTime(int& systemTime[]);
#import

extern string recommand = "加载于EURUSD M5  另开M1 M15 H1";
extern string GMT设置 = "Nord平台 冬令时GMT = 1 夏令时GMT = 2 挂机测试不需要设置此项";
extern int GMT_Mode = 1;
extern bool Use_ECN = FALSE;       //这个参数暂时不清楚,跟g_stoplevel合起来判断下单时候,是否设置止损止盈
extern bool Use_Rossie1 = TRUE;
extern bool Use_Rossie2 = TRUE;
extern bool Use_Rossie3 = TRUE;
extern bool Use_FanBei = FALSE;    //是否翻倍
extern double FanBei = 2.0;		   //翻倍倍数
extern double Lots = 0.1;		   //最小手数
extern bool Use_MM = FALSE;
extern double Risk = 8.0;


string g_comment_magic1 = "order comment---1";
string g_comment_magic2 = "order comment---2";
string g_comment_magic3 = "order comment---3";
int g_magic1 = 111;			  
int g_magic2 = 222;
int g_magic3 = 333;
double g_lots_magic1;
double g_risk_magic1;
double g_fanbei_magic1 = 1.0;
double g_lots_magic2;
double g_risk_magic2;
double g_fanbei_magic2 = 1.0;
double g_lots_magic3;
double g_risk_magic3;
double g_fanbei_magic3 = 1.0;
int g_slippage_252 = 3;
int g_count_loss_order_min_magic1 = 0;
int g_count_loss_order_max_magic1 = 2;
int g_threshold_magic1 = 0;
int g_count_loss_order_min_magic2 = 0;
int g_count_loss_order_max_magic2 = 2;
int g_threshold_magic2 = 0;
int g_count_loss_order_min_magic3 = 0;
int g_count_loss_order_max_magic3 = 2;
int g_threshold_magic3 = 0;
double g_max_risk = 10000.0;                                    //允许的最大风险, 10000.0 即不限制
double g_lots_max = 10000.0;                                    //允许的最大手数, 10000.0 即不限制
string g_comment_shock = "==== 震荡策略参数设置 ====";
int g_shock_ceiling_multiple = 100;								//价格震荡的震幅的上限倍数
int g_shock_floor_multiple = 20;							    //价格震荡的震幅的下限倍数
int g_period_shock_MA_m15 = 60;
int g_shock_MA_m15_multiple = 20;
int g_period_shock_WPR_m15 = 18;                                // WPR的周期为18
int g_shock_WPR_m15_open_bound_1 = 10;                            //
int g_shock_WPR_m15_modify_bound = 13;                                                
int g_shock_close_m5_multiple = -5;
int g_timezone_magic1_1 = 21;
int g_shock_WPR_m15_open_bound_2 = 6;
string g_comment_break = "==== 突破策略参数设置 ====";
int g_break_floor_multiple = 160;
int g_break_ceiling_multiple = 25;
int g_break_ATR_max_multiple = 180;
int g_break_ATR_min_multiple = 10;
int g_break_close_m5_multiple = 13;
int g_period_break_MA_h1 = 1;
int g_period_break_ATR_h1 = 19;
double g_break_ATR_multiple = 1.4;                         // 计算ATR参数通道的宽度
double g_break_ATR_h1_multiple = 4.7;                      // 初始化ATR振幅的高度
int g_datetime_modify_magic2_gap = 300;
int g_ATR_amplitude_multiple_limit = 270;
int g_ATR_amplitude_multiple = 20;
int g_timezone_magic2_1 = 0;
int g_timezone_magic2_2 = 8;
int g_timezone_magic2_3 = 7;
int g_timezone_magic2_4 = 18;
int g_timezone_magic2_5 = 17;
int g_timezone_magic2_6 = 13;
int g_timezone_magic2_7 = 14;
int g_timezone_magic2_8 = 6;
int g_timezone_magic2_9 = 9;
int g_timezone_magic2_10 = 2;
int g_timezone_magic2_11 = 3;
string g_comment_fish = "==== 抄底策略参数设置 ====";
int g_timezone_magic3_1 = 22;
int g_timezone_magic3_2 = 0;
double g_fish_floor_multiple = 160.0;
int g_fish_ceiling_multiple = 100;
int g_datetime_modify_magic3_gap = 300;
int fish_ATR_max_multiple = 60;
int fish_ATR_min_multiple = 20;
int g_period_fish_ATR_m5 = 60;
double g_fish_ATR_m5_multiple = 13.0;
int g_period_fish_bands = 26;
int fish_bands_multiple = -3;
int fish_bands_width_min_multiple = 30;
bool gi_unused_528 = TRUE;
string gs_unused_532 = "";
double g_minlot = 0.0;			//允许最小手数
double g_maxlot = 0.0;			//允许最大手数
int g_leverage = 0;				//杠杆
int g_lotsize = 0;				//标准手大小
int g_stoplevel = 0;			//止损位点数, 只有止损点数==0,才能下买单或者卖单
int g_datetime_order_modify_magic2 = 0;
int g_datetime_order_modify_magic3 = 0;
int g_count_history_order;
int g_time_diff;
int g_digits_aid;						//小数点位数辅助.FXCM 下,默认初始化为10
double g_point_aid;						//点值辅助.FXCM 下,默认初始化为0.0001	

int init() {
   g_lots_magic1 = Lots;
   g_lots_magic2 = Lots;
   g_lots_magic3 = Lots;
   g_risk_magic1 = Risk;
   g_risk_magic2 = Risk;
   g_risk_magic3 = Risk;
   if (Use_FanBei) {
      g_fanbei_magic1 = 1;
      g_fanbei_magic2 = FanBei;
      g_fanbei_magic3 = FanBei;
   }
   g_minlot = MarketInfo(Symbol(), MODE_MINLOT);
   g_maxlot = MarketInfo(Symbol(), MODE_MAXLOT);
   g_leverage = AccountLeverage();
   g_lotsize = MarketInfo(Symbol(), MODE_LOTSIZE);
   g_stoplevel = MarketInfo(Symbol(), MODE_STOPLEVEL);
   if (Digits == 3 || Digits == 5) g_digits_aid = 10;     	   //FXCM 的 Digits == 5
   else g_digits_aid = 1;
   g_point_aid = g_digits_aid * Point;						  //Point为当前报价的点值.FXCM EURUSD下,Point = 0.00001
   return (0);
}

int start() {
   double price_prime;
   double price_rossie_ceiling;
   double price_rossie_floor;
   color order_color;					
   bool is_order_modified_magic2;
   bool is_order_modified_magic3;
   int ticket_magic1;
   int ticket_magic2;
   int ticket_magic3;
   double price_magic1_ceiling;
   double price_magic1_floor;
   double price_magic2_ceiling;
   double price_magic2_floor;
   double ATR_amplitude;
   double l_price_88;
   double price_magic3_ceiling;
   double price_magic3_floor;
   double fish_ATR;
   double price_fish_stoploss;
   double lots_min;
   string order_comment_string;
   double l_lots_144;
   double l_lots_152;
   if (StringSubstr(Symbol(), 0, 6) != "EURUSD") {
      Alert("请加载于 EURUSD!");
      Sleep(10000);
      return (0);
   }
   if (Period() != PERIOD_M5) {
      Alert("请加载于 M5 周期!");
      Sleep(10000);
      return (0);
   }
   if (!IsDllsAllowed() && !IsTesting()) {
      Alert("dll 调用不了!");
      Sleep(10000);
      return (0);
   }
   if (!WindowHandle(Symbol(), PERIOD_M1) && !IsTesting()) {
      Alert("请再打开 EURUSD M1 周期图表!");
      Sleep(10000);
      return (0);
   }
   if (!WindowHandle(Symbol(), PERIOD_M15) && !IsTesting()) {
      Alert("请再打开 EURUSD M15 周期图表!");
      Sleep(10000);
      return (0);
   }
   if (!WindowHandle(Symbol(), PERIOD_H1) && !IsTesting()) {
      Alert("请再打开 EURUSD H1 周期图表!");
      Sleep(10000);
      return (0);
   }
   if (IsTesting()) g_time_diff = GMT_Mode;//Greenwich Mean Time 【天】格林尼治标准时间
   else g_time_diff = AutoGMT();
   CreateLabel("dhy1", "g_time_diff:" + g_time_diff, 15, "宋体",YellowGreen, 5, 160,2);
   CreateLabel("dhy2", "Digits:" + Digits, 15, "宋体",YellowGreen, 5, 140,2);
   CreateLabel("dhy3", "Point:" + Point, 15, "宋体",YellowGreen, 5, 120,2);
   CreateLabel("dhy4", "stop_level:" + MarketInfo(Symbol(), MODE_STOPLEVEL), 15, "宋体",YellowGreen, 5, 100,2);

   
   //Print("g_time_diff:", g_time_diff);
   //Print("Digits", Digits);
   //Print("Point", Point);
   ObjectCreate("klc", OBJ_LABEL, 0, 0, 0);
   ObjectSetText("klc", " GMT = " + DoubleToStr(g_time_diff, 0), 15, "宋体", Lime);
   ObjectSet("klc", OBJPROP_CORNER, 0);
   ObjectSet("klc", OBJPROP_XDISTANCE, 0);
   ObjectSet("klc", OBJPROP_YDISTANCE, 22);
   HideTestIndicators(FALSE);
   double close_m15     = iClose(NULL, PERIOD_M15, 1);//
   double shock_MA_m15  = iMA(NULL, PERIOD_M15, g_period_shock_MA_m15, 0, MODE_SMMA, PRICE_CLOSE, 1);   //shock_MA_m15为根据15分钟K线算出的周期为60(15小时)的威廉指标,即前15小时的MA
   double shock_WPR_m15 = iWPR(NULL, PERIOD_M15, g_period_shock_WPR_m15, 1);                            //shock_WPR_m15为根据15分钟K线算出的周期为18(4.5小时)的威廉指标,即前4.5小时的WPR
   double break_ATR_h1 = iATR(NULL, PERIOD_H1, g_period_break_ATR_h1, 1);                               //break_ATR_h1为根据1小时K线算出的周期为19(19小时)的ATR指标,即前19小时的ATR
   double break_MA_h1  = iMA(NULL, PERIOD_H1, g_period_break_MA_h1, 0, MODE_EMA, PRICE_CLOSE, 1);       //break_MA_h1为根据1小时K线算出的周期为1(1小时)的MA指标,即前1小时的MA
   double break_channel_ceiling = break_MA_h1 + break_ATR_h1 * g_break_ATR_multiple;                    //g_break_ATR_multiple = 1.4; 
   double break_channel_floor   = break_MA_h1 - break_ATR_h1 * g_break_ATR_multiple;                    //
   double close_m5 = iClose(NULL, PERIOD_M5, 1);                                                        //5分钟收盘价,即前5分钟K线的收盘价
   double fish_ATR_m5 = iATR(NULL, PERIOD_M5, g_period_fish_ATR_m5, 1);                     //fish_ATR_m5为根据5分钟K线算出的周期为60(5小时)的威廉指标,即前5小时的ATR
   double high_h1   = iHigh(NULL, PERIOD_H1, 1);
   double low_h1	= iLow(NULL, PERIOD_H1, 1);
   double fish_bands_ceiling 	= iBands(NULL, PERIOD_H1, g_period_fish_bands, 2, 0, PRICE_CLOSE, MODE_UPPER, 1); //根据K线的收盘价,周期为26日的布林带的上轨线,即前26日的BOLL的UP
   double fish_bands_floor 	= iBands(NULL, PERIOD_H1, g_period_fish_bands, 2, 0, PRICE_CLOSE, MODE_LOWER, 1); //根据K线的收盘价,周期为26日的布林带的上轨线,即前26日的BOLL的DN
   HideTestIndicators(FALSE);
   if (g_shock_floor_multiple < g_stoplevel / g_digits_aid) g_shock_floor_multiple = g_stoplevel / g_digits_aid;
   if (g_break_floor_multiple < g_stoplevel / g_digits_aid) g_break_floor_multiple = g_stoplevel / g_digits_aid;
   if (g_shock_ceiling_multiple < g_stoplevel / g_digits_aid) g_shock_ceiling_multiple = g_stoplevel / g_digits_aid;
   if (g_break_ceiling_multiple < g_stoplevel / g_digits_aid) g_break_ceiling_multiple = g_stoplevel / g_digits_aid;
   if (g_fish_floor_multiple < g_stoplevel / g_digits_aid) g_fish_floor_multiple = g_stoplevel / g_digits_aid;
   if (g_fish_ceiling_multiple < g_stoplevel / g_digits_aid) g_fish_ceiling_multiple = g_stoplevel / g_digits_aid;
   
   int timezone_revise_magic1_1 = g_timezone_magic1_1 + g_time_diff;
   int timezone_revise_magic1_2 = g_timezone_magic1_1 + g_time_diff;
   int timezone_revise_magic3_1 = g_timezone_magic3_1 + g_time_diff;
   int timezone_revise_magic3_2 = g_timezone_magic3_2 + g_time_diff;
   if (timezone_revise_magic1_1 > 23) timezone_revise_magic1_1 -= 24;
   if (timezone_revise_magic1_1 < 0) timezone_revise_magic1_1 += 24;
   if (timezone_revise_magic3_1 > 23) timezone_revise_magic3_1 -= 24;
   if (timezone_revise_magic3_1 < 0) timezone_revise_magic3_1 += 24;
   if (timezone_revise_magic1_2 > 23) timezone_revise_magic1_2 -= 24;
   if (timezone_revise_magic1_2 < 0) timezone_revise_magic1_2 += 24;
   if (timezone_revise_magic3_2 > 23) timezone_revise_magic3_2 -= 24;
   if (timezone_revise_magic3_2 < 0) timezone_revise_magic3_2 += 24;
   
   int timezone_revise_magic2_1 = g_timezone_magic2_1 + g_time_diff;
   int timezone_revise_magic2_2 = g_timezone_magic2_2 + g_time_diff;
   int timezone_revise_magic2_3 = g_timezone_magic2_3 + g_time_diff;
   int timezone_revise_magic2_4 = g_timezone_magic2_4 + g_time_diff;
   int timezone_revise_magic2_5 = g_timezone_magic2_5 + g_time_diff;
   int timezone_revise_magic2_6 = g_timezone_magic2_6 + g_time_diff;
   int timezone_revise_magic2_7 = g_timezone_magic2_7 + g_time_diff;
   int timezone_revise_magic2_8 = g_timezone_magic2_8 + g_time_diff;
   int timezone_revise_magic2_9 = g_timezone_magic2_9 + g_time_diff;
   int timezone_revise_magic2_10 = g_timezone_magic2_10 + g_time_diff;
   int timezone_revise_magic2_11 = g_timezone_magic2_11 + g_time_diff;
   if (timezone_revise_magic2_1 > 23) timezone_revise_magic2_1 -= 24;
   if (timezone_revise_magic2_1 < 0) timezone_revise_magic2_1 += 24;
   if (timezone_revise_magic2_2 > 23) timezone_revise_magic2_2 -= 24;
   if (timezone_revise_magic2_2 < 0) timezone_revise_magic2_2 += 24;
   if (timezone_revise_magic2_3 > 23) timezone_revise_magic2_3 -= 24;
   if (timezone_revise_magic2_3 < 0) timezone_revise_magic2_3 += 24;
   if (timezone_revise_magic2_4 > 23) timezone_revise_magic2_4 -= 24;
   if (timezone_revise_magic2_4 < 0) timezone_revise_magic2_4 += 24;
   if (timezone_revise_magic2_5 > 23) timezone_revise_magic2_5 -= 24;
   if (timezone_revise_magic2_5 < 0) timezone_revise_magic2_5 += 24;
   if (timezone_revise_magic2_6 > 23) timezone_revise_magic2_6 -= 24;
   if (timezone_revise_magic2_6 < 0) timezone_revise_magic2_6 += 24;
   if (timezone_revise_magic2_7 > 23) timezone_revise_magic2_7 -= 24;
   if (timezone_revise_magic2_7 < 0) timezone_revise_magic2_7 += 24;
   if (timezone_revise_magic2_8 > 23) timezone_revise_magic2_8 -= 24;
   if (timezone_revise_magic2_8 < 0) timezone_revise_magic2_8 += 24;
   if (timezone_revise_magic2_9 > 23) timezone_revise_magic2_9 -= 24;
   if (timezone_revise_magic2_9 < 0) timezone_revise_magic2_9 += 24;
   if (timezone_revise_magic2_10 > 23) timezone_revise_magic2_10 -= 24;
   if (timezone_revise_magic2_10 < 0) timezone_revise_magic2_10 += 24;
   if (timezone_revise_magic2_11 > 23) timezone_revise_magic2_11 -= 24;
   if (timezone_revise_magic2_11 < 0) timezone_revise_magic2_11 += 24;
   g_slippage_252 *= g_digits_aid;                                           //g_slippage_252 == 30, 允许3个点的滑点
   int count_magic1_buy = 0;
   int count_magic1_sell = 0;
   int count_magic2_buy = 0;
   int count_magic2_sell = 0;
   int count_magic3_buy = 0;
   int count_magic3_sell = 0;
   int last_modify_timie_delay_magic2 = g_datetime_order_modify_magic2 + g_datetime_modify_magic2_gap; // 300秒
   Print("last_modify_timie_delay_magic2(",TimeToStr(last_modify_timie_delay_magic2),") = g_datetime_order_modify_magic2(",TimeToStr(last_modify_timie_delay_magic2),") + g_datetime_modify_magic2_gap("+ g_datetime_modify_magic2_gap +")");
   int last_modify_timie_delay_magic3 = g_datetime_order_modify_magic3 + g_datetime_modify_magic3_gap;// 300秒

   for (int order_pos = OrdersTotal() - 1; order_pos >= 0; order_pos--) {
      if (!OrderSelect(order_pos, SELECT_BY_POS, MODE_TRADES)) Print("选择定单错误:", order_pos);
      else {
      /*
         Print("order_pos:", order_pos);
         Print("order_ticket:",OrderTicket());
         Print("order_opentime:",TimeToStr(OrderOpenTime()));
         Print("order_tradeoperation:",OrderType());
         Print("order_lots:",OrderLots());
         Print("order_openprice:",DoubleToStr(OrderOpenPrice(), 8));
         Print("order_stoploss:",DoubleToStr(OrderStopLoss(), 8));
         Print("order_takeprofit:",DoubleToStr(OrderTakeProfit(), 8));
         Print("order_closeprice:",DoubleToStr(OrderClosePrice(), 8));
         Print("order_closetime:",TimeToStr(OrderCloseTime()));
         Print("order_commission:",OrderCommission());
         Print("order_swap:",OrderSwap());
         Print("order_profit:",OrderProfit());
         Print("order_comment:",OrderComment());
         Print("order_magicnumber:",OrderMagicNumber());
         Print("order_expiration:",TimeToStr(OrderExpiration()));
         OrderPrint();
      */
         if (OrderType() <= OP_SELL && OrderSymbol() == Symbol()) {  // OrderType() == OP_BUY | OP_SELL
            if (OrderMagicNumber() == g_magic1) {
               if (OrderType() == OP_BUY) {
                  if (OrderStopLoss() == 0.0) {
                     price_magic1_ceiling = NormalizeDouble(Ask - g_shock_ceiling_multiple * g_point_aid, Digits);          //g_shock_ceiling_multiple -- 100;  g_point_aid -- 0.0001,止损点数
                     price_magic1_floor = NormalizeDouble(Ask + g_shock_floor_multiple * g_point_aid, Digits);              //g_shock_floor_multiple -- 20, 止盈点数
                     if (CheckStop(OrderType(), price_magic1_ceiling) && CheckTarget(OrderType(), price_magic1_floor)) {    //2个check永远返回true.
                        OrderModify(OrderTicket(), OrderOpenPrice(), price_magic1_ceiling, price_magic1_floor, 0, Green);
                        //OrderPrint();
                        Alert("price_magic1 BUY between:[",DoubleToStr(price_magic1_ceiling,Digits),",",DoubleToStr(price_magic1_floor,Digits),"]");
                     }
                  }
                  if (shock_WPR_m15 > (-g_shock_WPR_m15_modify_bound) && Bid > close_m15 + g_shock_close_m5_multiple * g_point_aid) { //shock_WPR_m15 > -13 && Bid > close_m15 - 0.0005 
                     RefreshRates();
                     OrderClose(OrderTicket(), OrderLots(), NormalizeDouble(Bid, Digits), g_slippage_252, Violet);
                     Print("shock_WPR_m15(",shock_WPR_m15,")>  (-g_shock_WPR_m15_modify_bound) (", -g_shock_WPR_m15_modify_bound,") && Bid(", DoubleToStr(Bid,Digits), 
                              ") > (close_m15(",DoubleToStr(close_m15,Digits),") + g_shock_close_m5_multiple(",g_shock_close_m5_multiple,") * g_point_aid(",g_point_aid,"))(", DoubleToStr(close_m15 + g_shock_close_m5_multiple * g_point_aid,Digits), ")");
                     OrderPrint();
                  } else count_magic1_buy++;
               } else { // OP_SELL
                  if (OrderStopLoss() == 0.0) {
                     price_magic1_ceiling = NormalizeDouble(Bid + g_shock_ceiling_multiple * g_point_aid, Digits);
                     price_magic1_floor = NormalizeDouble(Bid - g_shock_floor_multiple * g_point_aid, Digits);
                     if (CheckStop(OrderType(), price_magic1_ceiling) && CheckTarget(OrderType(), price_magic1_floor)){//忽略CheckStop和CheckTarget, 必定返回true
                        OrderModify(OrderTicket(), OrderOpenPrice(), price_magic1_ceiling, price_magic1_floor, 0, Green);
                        //OrderPrint();
                        Alert("price_magic1 SELL between:[",DoubleToStr(price_magic1_ceiling,Digits),",",DoubleToStr(price_magic1_floor,Digits),"]");
                     }
                  }
                  if (shock_WPR_m15 < g_shock_WPR_m15_modify_bound + (-100) && Bid < close_m15 - g_shock_close_m5_multiple * g_point_aid) { //shock_WPR_m15 < -87 && Bid < close_m15 + 0.0005 
                     RefreshRates();
                     OrderClose(OrderTicket(), OrderLots(), NormalizeDouble(Ask, Digits), g_slippage_252, Violet);

                     Print("shock_WPR_m15(",shock_WPR_m15,")< (g_shock_WPR_m15_modify_bound + (-100))(",g_shock_WPR_m15_modify_bound + (-100),") && Bid(", DoubleToStr(Bid,Digits),
                              ") < (close_m15(",DoubleToStr(close_m15,Digits),") - g_shock_close_m5_multiple(",g_shock_close_m5_multiple,") * g_point_aid(",g_point_aid,"))(", DoubleToStr(close_m15 - g_shock_close_m5_multiple * g_point_aid,Digits), ")");
                     OrderPrint();
                  } else count_magic1_sell++;
               }
            }
            if (OrderMagicNumber() == g_magic2) { //break
               if (OrderType() == OP_BUY) {
                  if (OrderStopLoss() == 0.0) {
                     price_magic2_ceiling = NormalizeDouble(Ask - g_break_ceiling_multiple * g_point_aid, Digits); //g_break_ceiling_multiple == 25 , 止损点数
                     price_magic2_floor = NormalizeDouble(Ask + g_break_floor_multiple * g_point_aid, Digits);     //g_break_floor_multiple == 160, 止盈点数
                     if (CheckStop(OrderType(), price_magic2_ceiling) && CheckTarget(OrderType(), price_magic2_floor)){ //忽略CheckStop和CheckTarget, 必定返回true
                        OrderModify(OrderTicket(), OrderOpenPrice(), price_magic2_ceiling, price_magic2_floor, 0, Green);
                        //OrderPrint();
                        Alert("price_magic2 BUY between:[",DoubleToStr(price_magic2_ceiling,Digits),",",DoubleToStr(price_magic2_floor,Digits),"]");
                     }
                  }
                  if (close_m5 <= break_channel_floor - g_break_close_m5_multiple * g_point_aid) { // close_m5 <= break_channel_floor - 0.0013, break_channel_floor = break_MA_h1 - 1.4 * break_ATR_h1
                     RefreshRates();
                     OrderClose(OrderTicket(), OrderLots(), NormalizeDouble(Bid, Digits), g_slippage_252, Violet);
                     Print("close_m5(",DoubleToStr(close_m5,Digits),") <= (break_channel_floor(",DoubleToStr(break_channel_floor,Digits),
                           ") - g_break_close_m5_multiple(",DoubleToStr(g_break_close_m5_multiple,Digits),") * g_point_aid(",g_point_aid,
                           "))(",DoubleToStr(break_channel_floor - g_break_close_m5_multiple * g_point_aid,Digits),")");
                     OrderPrint();
                  } else count_magic2_buy++;
                  if (TimeCurrent() >= last_modify_timie_delay_magic2) { //300s,也就是5分钟之后,修改止损点.止损点位为4.7*break_ATR_h1,并且在[10,180]点之内,否则调整成区间上下限;
                     ATR_amplitude = break_ATR_h1 * g_break_ATR_h1_multiple;//g_break_ATR_h1_multiple=4.7
                     if (ATR_amplitude > g_break_ATR_max_multiple * g_point_aid) ATR_amplitude = g_break_ATR_max_multiple * g_point_aid;//g_break_ATR_max_multiple = 180
                     if (ATR_amplitude < g_break_ATR_min_multiple * g_point_aid) ATR_amplitude = g_break_ATR_min_multiple * g_point_aid;//g_break_ATR_min_multiple = 10
                     if (Bid - OrderOpenPrice() > g_ATR_amplitude_multiple_limit * g_point_aid) ATR_amplitude = g_ATR_amplitude_multiple * g_point_aid;
                     l_price_88 = NormalizeDouble(Bid - ATR_amplitude, Digits); //l_price_88 为止损点, ATR_amplitude为止损点位
                     Print("l_price_88(",DoubleToStr(l_price_88,Digits),") = Bid(",DoubleToStr(Bid, Digits),") - ATR_amplitude(",DoubleToStr(ATR_amplitude, Digits),")");
                     if (Bid - OrderOpenPrice() > ATR_amplitude) {
                        if (OrderStopLoss() < l_price_88 && CheckStop(OrderType(), l_price_88)) {//忽略CheckStop和CheckTarget, 必定返回true
                           is_order_modified_magic2 = OrderModify(OrderTicket(), OrderOpenPrice(), l_price_88, OrderTakeProfit(), 0, Blue);
                           if (is_order_modified_magic2) g_datetime_order_modify_magic2 = TimeCurrent();
                        }
                     }
                  }
               } else { // OP_SELL
                  if (OrderStopLoss() == 0.0) {
                     price_magic2_ceiling = NormalizeDouble(Bid + g_break_ceiling_multiple * g_point_aid, Digits);//g_break_ceiling_multiple == 25 , 止损点数
                     price_magic2_floor = NormalizeDouble(Bid - g_break_floor_multiple * g_point_aid, Digits);     //g_break_floor_multiple == 160, 止盈点数
                     if (CheckStop(OrderType(), price_magic2_ceiling) && CheckTarget(OrderType(), price_magic2_floor)){//忽略CheckStop和CheckTarget, 必定返回true
                        OrderModify(OrderTicket(), OrderOpenPrice(), price_magic2_ceiling, price_magic2_floor, 0, Green);
                        //OrderPrint();
                        Alert("price_magic2 BUY between:[",DoubleToStr(price_magic2_ceiling,Digits),",",DoubleToStr(price_magic2_floor,Digits),"]");
                     }
                  }
                  if (close_m5 >= break_channel_ceiling + g_break_close_m5_multiple * g_point_aid) {// close_m5 <= break_channel_floor - 0.0013, break_channel_ceiling = break_MA_h1 + 1.4 * break_ATR_h1;
                     RefreshRates();
                     OrderClose(OrderTicket(), OrderLots(), NormalizeDouble(Ask, Digits), g_slippage_252, Violet);
                     Print("close_m5(",DoubleToStr(close_m5,Digits),") <= (break_channel_ceiling(",DoubleToStr(break_channel_ceiling,Digits),
                           ") + g_break_close_m5_multiple(",DoubleToStr(g_break_close_m5_multiple,Digits),") * g_point_aid(",g_point_aid,
                           "))(",DoubleToStr(break_channel_ceiling + g_break_close_m5_multiple * g_point_aid,Digits),")");
                     OrderPrint();
                  } else count_magic2_sell++;
                  if (TimeCurrent() >= last_modify_timie_delay_magic2) { //300s,也就是5分钟之后,修改止损点.止损点位为4.7*break_ATR_h1,并且在[10,180]点之内,否则调整成区间上下限;
                     ATR_amplitude = break_ATR_h1 * g_break_ATR_h1_multiple;//g_break_ATR_h1_multiple=4.7
                     if (ATR_amplitude > g_break_ATR_max_multiple * g_point_aid) ATR_amplitude = g_break_ATR_max_multiple * g_point_aid;//g_break_ATR_max_multiple = 180
                     if (ATR_amplitude < g_break_ATR_min_multiple * g_point_aid) ATR_amplitude = g_break_ATR_min_multiple * g_point_aid;//g_break_ATR_min_multiple = 10
                     if (OrderOpenPrice() - Ask > g_ATR_amplitude_multiple_limit * g_point_aid) ATR_amplitude = g_ATR_amplitude_multiple * g_point_aid;
                     l_price_88 = NormalizeDouble(Ask + ATR_amplitude, Digits);
                     Print("l_price_88(",DoubleToStr(l_price_88,Digits),") = Bid(",DoubleToStr(Bid, Digits),") - ATR_amplitude(",DoubleToStr(ATR_amplitude, Digits),")");
                     if (OrderOpenPrice() - Ask > ATR_amplitude) {
                        if (OrderStopLoss() > l_price_88 && CheckStop(OrderType(), l_price_88)) {//忽略CheckStop和CheckTarget, 必定返回true
                           is_order_modified_magic2 = OrderModify(OrderTicket(), OrderOpenPrice(), l_price_88, OrderTakeProfit(), 0, Red);
                           if (is_order_modified_magic2) g_datetime_order_modify_magic2 = TimeCurrent();
                        }
                     }
                  }
               }
            }
            if (OrderMagicNumber() == g_magic3) { // fish
               if (OrderType() == OP_BUY) {
                  if (OrderStopLoss() == 0.0) {
                     price_magic3_ceiling = NormalizeDouble(Ask - g_fish_ceiling_multiple * g_point_aid, Digits);//g_fish_ceiling_multiple == 100, 止损点数
                     price_magic3_floor = NormalizeDouble(Ask + g_fish_floor_multiple * g_point_aid, Digits);    //g_fish_ceiling_multiple == 160, 止盈点数
                     if (CheckStop(OrderType(), price_magic3_ceiling) && CheckTarget(OrderType(), price_magic3_floor)){//忽略CheckStop和CheckTarget, 必定返回true
                        OrderModify(OrderTicket(), OrderOpenPrice(), price_magic3_ceiling, price_magic3_floor, 0, Green);
                        //OrderPrint();
                        Alert("price_magic3 BUY between:[",DoubleToStr(price_magic3_ceiling,Digits),",",DoubleToStr(price_magic3_floor,Digits),"]");
                     }
                  }
                  //fish_bands_width_min_multiple == 30, fish_bands_multiple = -3                  
                  //timezone_revise_magic3_1 -- 22; timezone_revise_magic3_2 -- 0; 当前时间处在[22,24],(fish_bands_ceiling - fish_bands_floor)为26日的布林带宽度大于30个点
                  //high_h1 > fish_bands_ceiling(BOLL上轨线) - 3*fish_bands_multiple
                  if ( (timezone_revise_magic3_1 <= timezone_revise_magic3_2 && TimeHour(TimeCurrent()) >= timezone_revise_magic3_1 && TimeHour(TimeCurrent()) <= timezone_revise_magic3_2) || 
                       (timezone_revise_magic3_1 > timezone_revise_magic3_2 && TimeHour(TimeCurrent()) >= timezone_revise_magic3_1 || TimeHour(TimeCurrent()) <= timezone_revise_magic3_2) &&
                        fish_bands_ceiling - fish_bands_floor >= fish_bands_width_min_multiple * g_point_aid && high_h1 > fish_bands_ceiling + fish_bands_multiple * g_point_aid) {
                     RefreshRates();
                     OrderClose(OrderTicket(), OrderLots(), NormalizeDouble(Bid, Digits), g_slippage_252, Violet);
                  } else count_magic3_buy++;
                  if (TimeCurrent() >= last_modify_timie_delay_magic3) {//300延时
                     //价格震幅fish_ATR == 13.0*fish_ATR_m5,且[20,60],并修改price_fish_stoploss止损点
                     fish_ATR = fish_ATR_m5 * g_fish_ATR_m5_multiple;       //g_fish_ATR_m5_multiple = 13.0
                     if (fish_ATR > fish_ATR_max_multiple * g_point_aid) fish_ATR = fish_ATR_max_multiple * g_point_aid; //fish_ATR_max_multiple = 60
                     if (fish_ATR < fish_ATR_min_multiple * g_point_aid) fish_ATR = fish_ATR_min_multiple * g_point_aid; //fish_ATR_min_multiple = 20
                     price_fish_stoploss = NormalizeDouble(Bid - fish_ATR, Digits);
                     if (Bid - OrderOpenPrice() > fish_ATR) {
                        if (OrderStopLoss() < price_fish_stoploss && CheckStop(OrderType(), price_fish_stoploss)) {//忽略CheckStop和CheckTarget, 必定返回true
                           is_order_modified_magic3 = OrderModify(OrderTicket(), OrderOpenPrice(), price_fish_stoploss, OrderTakeProfit(), 0, Blue);
                           if (is_order_modified_magic3) g_datetime_order_modify_magic3 = TimeCurrent();
                        }
                     }
                  }
               } else { // OP_SELL
                  if (OrderStopLoss() == 0.0) {
                     price_magic3_ceiling = NormalizeDouble(Bid + g_fish_ceiling_multiple * g_point_aid, Digits);//g_fish_ceiling_multiple == 100, 止损点数
                     price_magic3_floor = NormalizeDouble(Bid - g_fish_floor_multiple * g_point_aid, Digits);     //g_fish_ceiling_multiple == 160, 止盈点数
                     if (CheckStop(OrderType(), price_magic3_ceiling) && CheckTarget(OrderType(), price_magic3_floor)){//忽略CheckStop和CheckTarget, 必定返回true
                        OrderModify(OrderTicket(), OrderOpenPrice(), price_magic3_ceiling, price_magic3_floor, 0, Green);
                        //OrderPrint();
                        Alert("price_magic3 BUY between:[",DoubleToStr(price_magic3_ceiling,Digits),",",DoubleToStr(price_magic3_floor,Digits),"]");
                     }
                  }
                  if ( (timezone_revise_magic3_1 <= timezone_revise_magic3_2 && TimeHour(TimeCurrent()) >= timezone_revise_magic3_1 && TimeHour(TimeCurrent()) <= timezone_revise_magic3_2) ||
                       (timezone_revise_magic3_1 > timezone_revise_magic3_2 && TimeHour(TimeCurrent()) >= timezone_revise_magic3_1 || TimeHour(TimeCurrent()) <= timezone_revise_magic3_2) &&
                       fish_bands_ceiling - fish_bands_floor >= fish_bands_width_min_multiple * g_point_aid && low_h1 < fish_bands_floor - fish_bands_multiple * g_point_aid) {
                     RefreshRates();
                     OrderClose(OrderTicket(), OrderLots(), NormalizeDouble(Ask, Digits), g_slippage_252, Violet);
                  } else count_magic3_sell++;
                  if (TimeCurrent() >= last_modify_timie_delay_magic3) {
                     fish_ATR = fish_ATR_m5 * g_fish_ATR_m5_multiple;  //g_fish_ATR_m5_multiple = 13.0
                     if (fish_ATR > fish_ATR_max_multiple * g_point_aid) fish_ATR = fish_ATR_max_multiple * g_point_aid;//fish_ATR_max_multiple = 60
                     if (fish_ATR < fish_ATR_min_multiple * g_point_aid) fish_ATR = fish_ATR_min_multiple * g_point_aid;//fish_ATR_min_multiple = 20
                     price_fish_stoploss = NormalizeDouble(Ask + fish_ATR, Digits);
                     if (OrderOpenPrice() - Ask > fish_ATR) {
                        if (OrderStopLoss() > price_fish_stoploss && CheckStop(OrderType(), price_fish_stoploss)) {//忽略CheckStop和CheckTarget, 必定返回true
                           is_order_modified_magic3 = OrderModify(OrderTicket(), OrderOpenPrice(), price_fish_stoploss, OrderTakeProfit(), 0, Red);
                           if (is_order_modified_magic3) g_datetime_order_modify_magic3 = TimeCurrent();
                           
                        }
                     }
                  }
               }
            }
         }
      }
   }
   g_count_history_order = 0;
   for (int l_pos_360 = OrdersHistoryTotal() - 1; l_pos_360 >= 0; l_pos_360--) {
      if (OrderSelect(l_pos_360, SELECT_BY_POS, MODE_HISTORY)) {
         if (OrderMagicNumber() == g_magic1 || OrderMagicNumber() == g_magic2 || OrderMagicNumber() == g_magic3) {
            if (TimeDay(OrderCloseTime()) != TimeDay(TimeCurrent())) break;
            g_count_history_order++;
            if (g_count_history_order >= 10) {
               Alert("今天的单子数太多了 看看有没有错误 明天才能挂机了!");
               Sleep(10000);
               return (0);
            }
         }
      }
   }
   int order_cmd = -1;
   if (Use_Rossie1) {
      if (g_lots_magic1 != 0.0) {
         lots_min = MathMin(g_maxlot, MathMax(g_minlot, g_lots_magic1));
         // 若开启Use_MM, 则会根据当前的风险系数,自由保证金等参数计算出最小手数
         if (Use_MM){
            lots_min = MathMax(g_minlot, MathMin(g_maxlot, NormalizeDouble(CalcRossie1() / 100.0 * AccountFreeMargin() / g_minlot / (g_lotsize / 100), 0) * g_minlot));
            Print("Use_MM, lots_min(",lots_min,") = {g_minlot(",g_minlot,"), g_maxlot(",g_maxlot,
               "), (NormalizeDouble(CalcRossie1()(",CalcRossie1(),") / 100.0 * AccountFreeMargin()(",AccountFreeMargin(),") / g_minlot(",g_minlot,") / (g_lotsize(",g_lotsize,") / 100), 0) * g_minlot(",g_minlot,"))(",
                  NormalizeDouble(CalcRossie1() / 100.0 * AccountFreeMargin() / g_minlot / (g_lotsize / 100), 0) * g_minlot
               ,")}");
         }
         if (lots_min > g_lots_max) {
            if(Use_MM){
               Print("Use_MM, if(lots_min(",lots_min,") > g_lots_max(",g_lots_max,")) lots_min = g_lots_max;");
            }
            lots_min = g_lots_max;
         }
         if (AccountFreeMargin() < Ask * lots_min * g_lotsize / g_leverage) {
            Alert("钱不够了. 下单量 = ", lots_min, " , 自由保证金 = ", AccountFreeMargin());
            return (0);
         }
         //magic1的买单单量小于1
         //close_m15 > shock_MA_m15 + 0.0020 && Bid < close_m15 - 0.0005 && shock_WPR_m15 < 10 + (-100) 处于oversell && Bid < close_m15 - (-0.0005) 
         //或者shock_WPR_m15 <  6 + (-100) && Bid < close_m15 - 0.0005 && Hour() == 21 || Hour() == 21
         //就下shock的买单
         if (count_magic1_buy < 1 && (close_m15 > shock_MA_m15 + g_shock_MA_m15_multiple * g_point_aid && shock_WPR_m15 < g_shock_WPR_m15_open_bound_1 + (-100) && 
               Bid < close_m15 - g_shock_close_m5_multiple * g_point_aid) || (shock_WPR_m15 < g_shock_WPR_m15_open_bound_2 + (-100) &&
               Bid < close_m15 - g_shock_close_m5_multiple * g_point_aid && Hour() == timezone_revise_magic1_1 || Hour() == timezone_revise_magic1_2)) {
            order_comment_string = "BUY";
            order_cmd = 0;
            order_color = Aqua;
            RefreshRates();
            price_prime = NormalizeDouble(Ask, Digits);
            price_rossie_ceiling = price_prime - g_shock_ceiling_multiple * g_point_aid;
            price_rossie_floor = price_prime + g_shock_floor_multiple * g_point_aid;
         }
         //magic1的卖单单量小于1
         //close_m15 < shock_MA_m15 - 0.0020 && Bid < close_m15 - 0.0005 && shock_WPR_m15 > -10 处于oversell && Bid > close_m15 + (-0.0005) 
         //或者shock_WPR_m15 > -6 && Bid < close_m15 + (-0.0005) && Hour() == 21 || Hour() == 21
         //就下shock的卖单
         if (count_magic1_sell < 1 && (close_m15 < shock_MA_m15 - g_shock_MA_m15_multiple * g_point_aid && shock_WPR_m15 > (-g_shock_WPR_m15_open_bound_1) &&
            Bid > close_m15 + g_shock_close_m5_multiple * g_point_aid) || (shock_WPR_m15 > (-g_shock_WPR_m15_open_bound_2) &&
            Bid > close_m15 + g_shock_close_m5_multiple * g_point_aid && Hour() == timezone_revise_magic1_1 || Hour() == timezone_revise_magic1_2)) {
            order_comment_string = "SELL";
            order_cmd = 1;
            order_color = Red;
            RefreshRates();
            price_prime = NormalizeDouble(Bid, Digits);
            price_rossie_ceiling = price_prime + g_shock_ceiling_multiple * g_point_aid;
            price_rossie_floor = price_prime - g_shock_floor_multiple * g_point_aid;
         }
      }
   }
   if (order_cmd >= OP_BUY && g_stoplevel == 0 || (CheckStop(order_cmd, price_rossie_ceiling) && CheckTarget(order_cmd, price_rossie_floor))) {//忽略CheckStop和CheckTarget, 必定返回true
      if (g_stoplevel == 0 || Use_ECN == TRUE) ticket_magic1 = OrderSend(Symbol(), order_cmd, lots_min, price_prime, g_slippage_252, 0, 0, g_comment_magic1, g_magic1, 0, order_color);
      else 									   ticket_magic1 = OrderSend(Symbol(), order_cmd, lots_min, price_prime, g_slippage_252, price_rossie_ceiling, price_rossie_floor, g_comment_magic1, g_magic1, 0, order_color);
      Sleep(5000);
      if (ticket_magic1 > 0) {
         if (OrderSelect(ticket_magic1, SELECT_BY_TICKET, MODE_TRADES)) Alert("定单 ", order_comment_string, " 开仓了!: ", OrderOpenPrice());
      } else Alert("开仓错误 ", order_comment_string, " 定单!: ", GetLastError());
   }
   order_cmd = -1;
   //Hour()=={0,8,7,18,17,13,14,6,9,2,3}其中之一
   if (!(TimeHour(TimeCurrent()) != timezone_revise_magic2_1 && TimeHour(TimeCurrent()) != timezone_revise_magic2_2 && TimeHour(TimeCurrent()) != timezone_revise_magic2_3 && TimeHour(TimeCurrent()) != timezone_revise_magic2_4 && TimeHour(TimeCurrent()) != timezone_revise_magic2_5 &&
      TimeHour(TimeCurrent()) != timezone_revise_magic2_6 && TimeHour(TimeCurrent()) != timezone_revise_magic2_7 && TimeHour(TimeCurrent()) != timezone_revise_magic2_8 && TimeHour(TimeCurrent()) != timezone_revise_magic2_9 && TimeHour(TimeCurrent()) != timezone_revise_magic2_10) ||
      !(TimeHour(TimeCurrent()) != timezone_revise_magic2_11)) {
      if (Use_Rossie2) {
         if (g_lots_magic2 != 0.0) {
            l_lots_144 = MathMin(g_maxlot, MathMax(g_minlot, g_lots_magic2));
            if (Use_MM) l_lots_144 = MathMax(g_minlot, MathMin(g_maxlot, NormalizeDouble(CalcRossie2() / 100.0 * AccountFreeMargin() / g_minlot / (g_lotsize / 100), 0) * g_minlot));
            if (l_lots_144 > g_lots_max) l_lots_144 = g_lots_max;
            if (AccountFreeMargin() < Ask * l_lots_144 * g_lotsize / g_leverage) {
               Alert("钱不够了. 下单量 = ", l_lots_144, " , 自由保证金 = ", AccountFreeMargin());
               return (0);
            }
            //magic2的sell单小于1 && close_m5 <= break_channel_floor - 0.0013
            //break_channel_floor   = break_MA_h1 - 1.4 * break_ATR_h1;                    //
            if (count_magic2_sell < 1 && close_m5 <= break_channel_floor - g_break_close_m5_multiple * g_point_aid) {
               order_comment_string = "SELL";
               order_cmd = 1;
               order_color = Yellow;
               price_prime = NormalizeDouble(Bid, Digits);
               price_rossie_ceiling = price_prime + g_break_ceiling_multiple * g_point_aid;
               price_rossie_floor = price_prime - g_break_floor_multiple * g_point_aid;
            }
            //magic2的sell单小于1 && close_m5 >= break_channel_ceiling + 0.0013
            //break_channel_ceiling = break_MA_h1 + 1.4 * break_ATR_h1; 
            if (count_magic2_buy < 1 && close_m5 >= break_channel_ceiling + g_break_close_m5_multiple * g_point_aid) {
               order_comment_string = "BUY";
               order_cmd = 0;
               order_color = DodgerBlue;
               price_prime = NormalizeDouble(Ask, Digits);
               price_rossie_ceiling = price_prime - g_break_ceiling_multiple * g_point_aid;
               price_rossie_floor = price_prime + g_break_floor_multiple * g_point_aid;
            }
         }
      }
   }
   if (order_cmd >= OP_BUY && g_stoplevel == 0 || (CheckStop(order_cmd, price_rossie_ceiling) && CheckTarget(order_cmd, price_rossie_floor))) {//忽略CheckStop和CheckTarget, 必定返回true
      if (g_stoplevel == 0 || Use_ECN == TRUE) ticket_magic2 = OrderSend(Symbol(), order_cmd, l_lots_144, price_prime, g_slippage_252, 0, 0, g_comment_magic2, g_magic2, 0, order_color);
      else ticket_magic2 = OrderSend(Symbol(), order_cmd, l_lots_144, price_prime, g_slippage_252, price_rossie_ceiling, price_rossie_floor, g_comment_magic2, g_magic2, 0, order_color);
      Sleep(5000);
      if (ticket_magic2 > 0) {
         if (OrderSelect(ticket_magic2, SELECT_BY_TICKET, MODE_TRADES)) Alert("Order ", order_comment_string, " opened!: ", OrderOpenPrice());
      } else Alert("开仓错误 ", order_comment_string, " 定单!: ", GetLastError());
   }
   order_cmd = -1;
   if (Use_Rossie3) {
      if (g_lots_magic3 != 0.0) {
         l_lots_152 = MathMin(g_maxlot, MathMax(g_minlot, g_lots_magic3));
         if (Use_MM) l_lots_152 = MathMax(g_minlot, MathMin(g_maxlot, NormalizeDouble(CalcRossie3() / 100.0 * AccountFreeMargin() / g_minlot / (g_lotsize / 100), 0) * g_minlot));
         if (l_lots_152 > g_lots_max) l_lots_152 = g_lots_max;
         if (AccountFreeMargin() < Ask * l_lots_152 * g_lotsize / g_leverage) {
            Alert("钱不够了. 下单量 = ", l_lots_152, " , 自由保证金 = ", AccountFreeMargin());
            return (0);
         }
         //magic3的buy单小于1 && Hour() 在[22:00,23:59]之间
         //(fish_bands_ceiling - fish_bands_floor)为26日的布林带宽度大于30个点
         //low_h1 < fish_bands_floor - (-0.0003)
         if (count_magic3_buy < 1 && (timezone_revise_magic3_1 <= timezone_revise_magic3_2 && TimeHour(TimeCurrent()) >= timezone_revise_magic3_1 && TimeHour(TimeCurrent()) <= timezone_revise_magic3_2) || 
            (timezone_revise_magic3_1 > timezone_revise_magic3_2 && TimeHour(TimeCurrent()) >= timezone_revise_magic3_1 || TimeHour(TimeCurrent()) <= timezone_revise_magic3_2) &&
            fish_bands_ceiling - fish_bands_floor >= fish_bands_width_min_multiple * g_point_aid && low_h1 < fish_bands_floor - fish_bands_multiple * g_point_aid) {
            order_comment_string = "BUY";
            order_cmd = 0;
            order_color = Aqua;
            RefreshRates();
            price_prime = NormalizeDouble(Ask, Digits);
            price_rossie_ceiling = price_prime - g_fish_ceiling_multiple * g_point_aid;
            price_rossie_floor = price_prime + g_fish_floor_multiple * g_point_aid;
         }
         //magic3的sell单小于1 && Hour() 在[22:00,23:59]之间
         //(fish_bands_ceiling - fish_bands_floor)为26日的布林带宽度大于30个点
         //high_h1 > fish_bands_ceiling + (-0.0003)
         if (count_magic3_sell < 1 && (timezone_revise_magic3_1 <= timezone_revise_magic3_2 && TimeHour(TimeCurrent()) >= timezone_revise_magic3_1 && TimeHour(TimeCurrent()) <= timezone_revise_magic3_2) ||
            (timezone_revise_magic3_1 > timezone_revise_magic3_2 && TimeHour(TimeCurrent()) >= timezone_revise_magic3_1 || TimeHour(TimeCurrent()) <= timezone_revise_magic3_2) &&
            fish_bands_ceiling - fish_bands_floor >= fish_bands_width_min_multiple * g_point_aid && high_h1 > fish_bands_ceiling + fish_bands_multiple * g_point_aid) {
            order_comment_string = "SELL";
            order_cmd = 1;
            order_color = DeepPink;
            RefreshRates();
            price_prime = NormalizeDouble(Bid, Digits);
            price_rossie_ceiling = price_prime + g_fish_ceiling_multiple * g_point_aid;
            price_rossie_floor = price_prime - g_fish_floor_multiple * g_point_aid;
         }
      }
   }
   if (order_cmd >= OP_BUY && g_stoplevel == 0 || (CheckStop(order_cmd, price_rossie_ceiling) && CheckTarget(order_cmd, price_rossie_floor))) {//忽略CheckStop和CheckTarget, 必定返回true
      if (g_stoplevel == 0 || Use_ECN == TRUE) ticket_magic3 = OrderSend(Symbol(), order_cmd, l_lots_152, price_prime, g_slippage_252, 0, 0, g_comment_magic3, g_magic3, 0, order_color);
      else ticket_magic3 = OrderSend(Symbol(), order_cmd, l_lots_152, price_prime, g_slippage_252, price_rossie_ceiling, price_rossie_floor, g_comment_magic3, g_magic3, 0, order_color);
      Sleep(5000);
      if (ticket_magic3 > 0) {
         if (OrderSelect(ticket_magic3, SELECT_BY_TICKET, MODE_TRADES)) Alert("Order ", order_comment_string, " opened!: ", OrderOpenPrice());
      } else Alert("开仓错误 ", order_comment_string, " 定单!: ", GetLastError());
   }
   /*
   COMMENT
   */
   return (0);
}

int AutoGMT() {

   int systemTime[4];
   GetSystemTime(systemTime);
   int wYear = systemTime[0] & 65535;
   int wMonth = systemTime[0] >> 16;
   int wDay = systemTime[1] >> 16;
   int wHour = systemTime[2] & 65535;
   int wMinute = systemTime[2] >> 16;
   int wSecond = systemTime[3] & 65535;
   string sDataTime = FormatDateTime(wYear, wMonth, wDay, wHour, wMinute, wSecond);
   double g_time_diff = TimeCurrent() - StrToTime(sDataTime);
   return (MathRound(g_time_diff / 3600.0));
}

string FormatDateTime(int wYear, int wMonth, int wDay, int wHour, int wMinute, int wSecond) {

   string sMonth = wMonth + 100;
   sMonth = StringSubstr(sMonth, 1);
   string sDay = wDay + 100;
   sDay = StringSubstr(sDay, 1);
   string sHour = wHour + 100;
   sHour = StringSubstr(sHour, 1);
   string sMinute = wMinute + 100;
   sMinute = StringSubstr(sMinute, 1);
   string sSecond = wSecond + 100;
   sSecond = StringSubstr(sSecond, 1);
   return (StringConcatenate(wYear, ".", sMonth, ".", sDay, " ", sHour, ":", sMinute, ":", sSecond));
}
/*
   用于统计最近连续的亏损单子数量
   并计算出新的风险系数
*/
double CalcRossie1() {
   int exp;
   double point_aid;
   double risk = g_risk_magic1;
   int count_loss_order = 0;
   if (Digits <= 3) point_aid = 0.01;
   else point_aid = 0.0001;
   for (int hist_order_index = OrdersHistoryTotal(); hist_order_index >= 0; hist_order_index--) {
      if (OrderSelect(hist_order_index, SELECT_BY_POS, MODE_HISTORY)) {
         if (OrderType() <= OP_SELL && OrderSymbol() == Symbol() && OrderMagicNumber() == g_magic1) {
            if (OrderProfit() > 0.0) {
               if (g_threshold_magic1 == 0) break;
               if (MathAbs(OrderClosePrice() - OrderOpenPrice()) / point_aid > g_threshold_magic1) break;
            } else count_loss_order++;
         }
      }
   }
   if (count_loss_order > g_count_loss_order_min_magic1 && g_count_loss_order_max_magic1 > 1) {
      exp = MathMod(count_loss_order, g_count_loss_order_max_magic1);
      risk *= MathPow(g_fanbei_magic1, exp);
   }
   if (g_max_risk > 0.0 && risk > g_max_risk) risk = g_max_risk;
   return (risk);
}

double CalcRossie2() {
   int exp;
   double point_aid;
   double risk = g_risk_magic2;
   int count_loss_order = 0;
   if (Digits <= 3) point_aid = 0.01;
   else point_aid = 0.0001;
   for (int hist_order_index = OrdersHistoryTotal(); hist_order_index >= 0; hist_order_index--) {
      if (OrderSelect(hist_order_index, SELECT_BY_POS, MODE_HISTORY)) {
         if (OrderType() <= OP_SELL && OrderSymbol() == Symbol() && OrderMagicNumber() == g_magic2) {
            if (OrderProfit() > 0.0) {
               if (g_threshold_magic2 == 0) break;
               if (MathAbs(OrderClosePrice() - OrderOpenPrice()) / point_aid > g_threshold_magic2) break;
            } else count_loss_order++;
         }
      }
   }
   if (count_loss_order > g_count_loss_order_min_magic2 && g_count_loss_order_max_magic2 > 1) {
      exp = MathMod(count_loss_order, g_count_loss_order_max_magic2);
      risk *= MathPow(g_fanbei_magic2, exp);
   }
   if (g_max_risk > 0.0 && risk > g_max_risk) risk = g_max_risk;
   return (risk);
}

double CalcRossie3() {
   int exp;
   double point_aid;
   double risk = g_risk_magic3;
   int count_loss_order = 0;
   if (Digits <= 3) point_aid = 0.01;
   else point_aid = 0.0001;
   for (int hist_order_index = OrdersHistoryTotal(); hist_order_index >= 0; hist_order_index--) {
      if (OrderSelect(hist_order_index, SELECT_BY_POS, MODE_HISTORY)) {
         if (OrderType() <= OP_SELL && OrderSymbol() == Symbol() && OrderMagicNumber() == g_magic3) {
            if (OrderProfit() > 0.0) {
               if (g_threshold_magic3 == 0) break;
               if (MathAbs(OrderClosePrice() - OrderOpenPrice()) / point_aid > g_threshold_magic3) break;
            } else count_loss_order++;
         }
      }
   }
   if (count_loss_order > g_count_loss_order_min_magic3 && g_count_loss_order_max_magic3 > 1) {
      exp = MathMod(count_loss_order, g_count_loss_order_max_magic3);
      risk *= MathPow(g_fanbei_magic3, exp);
   }
   if (g_max_risk > 0.0 && risk > g_max_risk) risk = g_max_risk;
   return (risk);
}

/*
测试结果,CheckStop,CheckTarget两个函数因为stop_level永远等于0
所以永远返回FALSE
*/
int CheckStop(int order_type, double price_ceiling) {
   bool check_stop = TRUE;
   int stop_level = MarketInfo(Symbol(), MODE_STOPLEVEL);
   if (stop_level > 0 && price_ceiling > 0.0 && order_type == 0 && price_ceiling > Bid - stop_level * Point) check_stop = FALSE;
   else
      if (stop_level > 0 && price_ceiling > 0.0 && order_type == 1 && price_ceiling < Ask + stop_level * Point) check_stop = FALSE;
      
   if(check_stop == FALSE)
      Print("CheckStop (", order_type," ,",DoubleToStr(price_ceiling, Digits), ").return stop_level:",stop_level," check_stop:", check_stop);
   return (check_stop);
}

int CheckTarget(int order_type, double price_floor) {
   bool check_target = TRUE;
   int stop_level = MarketInfo(Symbol(), MODE_STOPLEVEL);
   if (stop_level > 0 && price_floor > 0.0 && order_type == 0 && price_floor < Bid + stop_level * Point) check_target = FALSE;
   else
      if (stop_level > 0 && price_floor > 0.0 && order_type == 1 && price_floor > Ask - stop_level * Point) check_target = FALSE;
   
   if(check_target == FALSE)
      Print("CheckTarget (", order_type," ,",DoubleToStr(price_floor, Digits),").return stop_level:",stop_level," check_target:", check_target);
   return (check_target);
}

void CreateLabel(string name, string text, int fontsize, string fontname, color colorname, int x_distance, int y_distance, int corner) {
   if (ObjectFind(name) == -1)
   if (!ObjectCreate(name, OBJ_LABEL, 0, 0, 0)) {
		Print("error: can\'\'t create ", name, "! code #", GetLastErrorStr());
	}
   ObjectSet(name, OBJPROP_CORNER, corner);
   ObjectSet(name, OBJPROP_XDISTANCE, x_distance);
   ObjectSet(name, OBJPROP_YDISTANCE, y_distance);
   ObjectSet(name, OBJPROP_WIDTH, 1500);
   ObjectSetText(name, text, fontsize, fontname, colorname);
}

string GetLastErrorStr() {
   int l_error_0 = GetLastError();
   switch (l_error_0) {
   case 0/* NO_ERROR */:
      return ("没有错误返回." + "[" + l_error_0 + "]");
   case 1/* NO_RESULT */:
      return ("没有错误返回,但结果不明." + "[" + l_error_0 + "]");
   case 2/* COMMON_ERROR */:
      return ("一般错误." + "[" + l_error_0 + "]");
   case 3/* INVALID_TRADE_PARAMETERS */:
      return ("无效的交易参数." + "[" + l_error_0 + "]");
   case 4/* SERVER_BUSY */:
      return ("交易服务器繁忙." + "[" + l_error_0 + "]");
   case 5/* OLD_VERSION */:
      return ("客户终端版本太旧." + "[" + l_error_0 + "]");
   case 6/* NO_CONNECTION */:
      return ("没有连接到服务器." + "[" + l_error_0 + "]");
   case 7/* NOT_ENOUGH_RIGHTS */:
      return ("没有足够权限进行相应操作." + "[" + l_error_0 + "]");
   case 8/* TOO_FREQUENT_REQUESTS */:
      return ("请求过于频繁." + "[" + l_error_0 + "]");
   case 9/* MALFUNCTIONAL_TRADE */:
      return ("交易运行故障." + "[" + l_error_0 + "]");
   case 64/* ACCOUNT_DISABLED */:
      return ("帐户被禁止." + "[" + l_error_0 + "]");
   case 65/* INVALID_ACCOUNT */:
      return ("无效的帐户." + "[" + l_error_0 + "]");
   case 128/* TRADE_TIMEOUT */:
      return ("交易超时." + "[" + l_error_0 + "]");
   case 129/* INVALID_PRICE */:
      return ("无效的价格." + "[" + l_error_0 + "]");
   case 130/* INVALID_STOPS */:
      return ("无效的止损价格." + "[" + l_error_0 + "]");
   case 131/* INVALID_TRADE_VOLUME */:
      return ("无效的下单量." + "[" + l_error_0 + "]");
   case 132/* MARKET_CLOSED */:
      return ("市场已关闭." + "[" + l_error_0 + "]");
   case 133/* TRADE_DISABLED */:
      return ("交易被禁止." + "[" + l_error_0 + "]");
   case 134/* NOT_ENOUGH_MONEY */:
      return ("资金不足." + "[" + l_error_0 + "]");
   case 135/* PRICE_CHANGED */:
      return ("价格已变化." + "[" + l_error_0 + "]");
   case 136/* OFF_QUOTES */:
      return ("开价." + "[" + l_error_0 + "]");
   case 137/* BROKER_BUSY */:
      return ("经纪人繁忙." + "[" + l_error_0 + "]");
   case 138/* REQUOTE */:
      return ("重新开价." + "[" + l_error_0 + "]");
   case 139/* ORDER_LOCKED */:
      return ("定单被锁定." + "[" + l_error_0 + "]");
   case 140/* LONG_POSITIONS_ONLY_ALLOWED */:
      return ("只允许开多仓." + "[" + l_error_0 + "]");
   case 141/* TOO_MANY_REQUESTS */:
      return ("请求过多." + "[" + l_error_0 + "]");
   case 145/* TRADE_MODIFY_DENIED */:
      return ("因为价格过于接近市价,所以操作被拒绝." + "[" + l_error_0 + "]");
   case 146/* TRADE_CONTEXT_BUSY */:
      return ("交易作业忙." + "[" + l_error_0 + "]");
   case 147/* ERR_TRADE_EXPIRATION_DENIED */:
      return ("服务器禁止设定过期时间." + "[" + l_error_0 + "]");
   case 148/* ERR_TRADE_TOO_MANY_ORDERS */:
      return ("开单和挂单总数已被经纪限定." + "[" + l_error_0 + "]");
   }
   return ("未知错误." + "[" + l_error_0 + "]");
}


